/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> Gemini {\n  provider google-ai\n  options {\n    model \"gemini-2.0-flash-lite\"\n    api_key env.GEMINI_API_KEY\n  }\n}\n",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.89.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "tour.baml": "// Defining a data model.\nclass Tour {\n  tourName string\n  tourDate string @description(\"The date of the tour in the format of MM/DD/YYYY\")\n  expectedAttendees int @description(\"The number of expected attendees, if none, return 0\")\n  actualAttendees int @description(\"The number of actual attendees, if none, return 0\")\n  walkups int @description(\"The number of walkups, if none, return 0\")\n  waitlist int @description(\"The number of waitlist attendees, if none, return 0\")\n  donations float @description(\"The amount of donations, if none, return 0\")\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractTourInfo(tour: string) -> Tour {\n  // Specify a client as provider/model-name\n  client \"Gemini\"\n  prompt #\"\n    Extract from this content:\n    {{ tour }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest Presidio {\n  functions [ExtractTourInfo]\n  args {\n    tour #\"\nName of Tour: Presidio & Tunnel Tops\nGuide Name: Philip Smith\nDate:  6/1/25, 1:00 pm\n\n1. How many walkers were on your roster? 15 \n2. How many walkers showed up for the tour from the roster?  14 \n3. How many from the wait list showed up? N/A\n4. Did you have any walk-ups? \n\n5. Total amount of walkers on the tour:  14\n6. Golden Envelope donation amount: $40 \n\n7. Any special notes for Jef?\n\nOne no-show was sick. Walkers were all Bay Area folks, except one. Latter was a young man originally from Poland now working for Deloitte in Dubai. One local was someone I worked with 15 years ago and turns out to be a City Guides veteran of 24 or so tours. Her friend visiting from Philadelphia was a former City Guides guide, until she moved to Philly to be near her kids. Both wildly enthusiastic about SFCG!\n\nOne of the group was in an electric wheelchair - something we had just discussed with our guide group. Accompanied by her husband she was well able to handle the route, including getting in and out of the Inn at the Presidio. So not a problem at all. A Brit, originally from Manchester just like me, now living here. \n\nGreat group overall - active, engaged, lots of good questions. Happy that by the time we arrived at Tunnel Tops the cold grey weather had turned to sun and a pretty clear view of the bay. \n    \"#\n  }\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}